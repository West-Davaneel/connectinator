{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Connectinator We all know initiating a conversation is intimidating... So we built a bot to do it! Connectinator is West Davaneel's latest innovation, created during Workday's ORBIT program. Demo For a limitted time only, Connectinator's Slack is open for YOU to /connect with workmates! Join with the invite: https://join.slack.com/t/connectinator/shared_invite/zt-wkr4vb43-ajiOSwTuLdnlSPNAwRJsKg Made with the power of Friendship","title":"Connectinator"},{"location":"#connectinator","text":"We all know initiating a conversation is intimidating... So we built a bot to do it! Connectinator is West Davaneel's latest innovation, created during Workday's ORBIT program.","title":"Connectinator"},{"location":"#demo","text":"For a limitted time only, Connectinator's Slack is open for YOU to /connect with workmates! Join with the invite: https://join.slack.com/t/connectinator/shared_invite/zt-wkr4vb43-ajiOSwTuLdnlSPNAwRJsKg","title":"Demo"},{"location":"#made-with-the-power-of-friendship","text":"","title":"Made with the power of Friendship"},{"location":"getting-started/","text":"Getting Started Connecticator is built using Bolt , Slack's official Python framework for creating apps. You might wanna check out their docs , or view Resources , before continuing. Installation Install and run Connecticator locally. Note If you are not a part of West Davaneel, you will have to create a Slack App . Clone Repository $ git clone https://github.com/West-Davaneel/connectinator.git ---> 100% \ud83d\udd0d Navigate into the repository $ cd connectinator // Now you are in the repostiory \ud83d\ude01 Looking into the repository folder, you should be seeing something like this: \u2514\u2500\u2500\u2500connecticator <-- The repository folder \u251c\u2500\u2500\u2500connecticator <-- Helper modules, classes, functions \u251c\u2500\u2500\u2500docs <-- Documentation \u251c\u2500\u2500\u2500.env.example <-- Example .env file \u251c\u2500\u2500\u2500requirements.txt <-- Requirements (dependencies) \u2514\u2500\u2500\u2500app.py <-- Runs the Connecticator App Set up environment \ud83e\udd2b Get environmental variables These are variables that should not be hardcoded in, either for customization or security. Warning We keep the API keys in environmental variables -- NEVER commit them! \u2514\u2500\u2500\u2500connecticator \u251c\u2500\u2500\u2500connecticator \u251c\u2500\u2500\u2500docs \u251c\u2500\u2500\u2500.env.example \u251c\u2500\u2500\u2500requirements.txt \u251c\u2500\u2500\u2500app.py \u2514\u2500\u2500\u2500.env <-- Create this file! You must create a file named .env and supply these variables. These variables are either given to you or you must obtain them following the Bolt Python tutorial. Example You can see the .env.example as an example: SLACK_BOT_TOKEN=secretbottoken SLACK_APP_TOKEN=westdavaneelisgoingtowin \ud83d\udc0d Create Python virtual environment There are a good amount of depencies for this project -- it will be good practice to use a virtual environment, albeit not necessary. macOS/Linux python3 -m venv env Windows Command Line python -m venv env Windows Powershell python -m venv env The last argument is the location to create the virtual environment. Generally, you can just create this in your project and call it env. \u2705 Activate virtual environment macOS/Linux source env/bin/activate Windows Command Line .\\env\\Scripts\\activate.bat Windows Powershell .\\env\\Scripts\\activate.ps1 \ud83d\udce6 Install packages $ python -m pip install -r requirements.txt ---> 100% Run the app The app does not Hot Reload when changes are made -- you will have to restart the app for any changes to come into effect. $ python . \\a pp.py DEBUG:slack_bolt.App:Sending a request INFO:slack_bolt.App:A new session has been established (session id: 123456) INFO:slack_bolt.App:Bolt app is running!","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Connecticator is built using Bolt , Slack's official Python framework for creating apps. You might wanna check out their docs , or view Resources , before continuing.","title":"Getting Started"},{"location":"getting-started/#installation","text":"Install and run Connecticator locally. Note If you are not a part of West Davaneel, you will have to create a Slack App .","title":"Installation"},{"location":"getting-started/#clone-repository","text":"$ git clone https://github.com/West-Davaneel/connectinator.git ---> 100% \ud83d\udd0d Navigate into the repository $ cd connectinator // Now you are in the repostiory \ud83d\ude01 Looking into the repository folder, you should be seeing something like this: \u2514\u2500\u2500\u2500connecticator <-- The repository folder \u251c\u2500\u2500\u2500connecticator <-- Helper modules, classes, functions \u251c\u2500\u2500\u2500docs <-- Documentation \u251c\u2500\u2500\u2500.env.example <-- Example .env file \u251c\u2500\u2500\u2500requirements.txt <-- Requirements (dependencies) \u2514\u2500\u2500\u2500app.py <-- Runs the Connecticator App","title":"Clone Repository"},{"location":"getting-started/#set-up-environment","text":"\ud83e\udd2b Get environmental variables These are variables that should not be hardcoded in, either for customization or security. Warning We keep the API keys in environmental variables -- NEVER commit them! \u2514\u2500\u2500\u2500connecticator \u251c\u2500\u2500\u2500connecticator \u251c\u2500\u2500\u2500docs \u251c\u2500\u2500\u2500.env.example \u251c\u2500\u2500\u2500requirements.txt \u251c\u2500\u2500\u2500app.py \u2514\u2500\u2500\u2500.env <-- Create this file! You must create a file named .env and supply these variables. These variables are either given to you or you must obtain them following the Bolt Python tutorial. Example You can see the .env.example as an example: SLACK_BOT_TOKEN=secretbottoken SLACK_APP_TOKEN=westdavaneelisgoingtowin \ud83d\udc0d Create Python virtual environment There are a good amount of depencies for this project -- it will be good practice to use a virtual environment, albeit not necessary. macOS/Linux python3 -m venv env Windows Command Line python -m venv env Windows Powershell python -m venv env The last argument is the location to create the virtual environment. Generally, you can just create this in your project and call it env. \u2705 Activate virtual environment macOS/Linux source env/bin/activate Windows Command Line .\\env\\Scripts\\activate.bat Windows Powershell .\\env\\Scripts\\activate.ps1 \ud83d\udce6 Install packages $ python -m pip install -r requirements.txt ---> 100%","title":"Set up environment"},{"location":"getting-started/#run-the-app","text":"The app does not Hot Reload when changes are made -- you will have to restart the app for any changes to come into effect. $ python . \\a pp.py DEBUG:slack_bolt.App:Sending a request INFO:slack_bolt.App:A new session has been established (session id: 123456) INFO:slack_bolt.App:Bolt app is running!","title":"Run the app"},{"location":"resources/","text":"Resources Paste em here Bolt Python Docs Slack SDK Docs Tutorials for Slack in python How to Build a Slack bot tutorial","title":"Resources"},{"location":"resources/#resources","text":"Paste em here Bolt Python Docs Slack SDK Docs Tutorials for Slack in python How to Build a Slack bot tutorial","title":"Resources"}]}